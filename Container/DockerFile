# docker pull nvcr.io/nvidia/l4t-jetpack:r35.3.1
# jetpack version should be 5.1.1
FROM JetPack-L4T:latest

# not sure if cuda version is matched... https://github.com/dusty-nv/jetson-containers/blob/master/packages/cuda/cuda/config.py
ENV CUDA_VERSION=12.2.0 
ENV CUDNN_VERSION=8.5?
ENV TENSORRT_VERSION=8.6?
ENV PIP_INDEX_URL=

COPY . /scripts

RUN apt -y update && apt -y upgrade

# build-essential
ENV DEBIAN_FRONTEND=noninteractive \
    LANGUAGE=en_US:en \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8

RUN /scripts/build-essential.sh

COPY tarpack /usr/local/bin/

# python 3.8.10
ENV PYTHON_VERSION=3.8 \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=utf-8 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_CACHE_PURGE=true \
    PIP_ROOT_USER_ACTION=ignore \
    TWINE_NON_INTERACTIVE=1 \
    DEBIAN_FRONTEND=noninteractive

RUN /scripts/install-python.sh

# numpy
ENV OPENBLAS_CORETYPE=ARMV8

RUN pip3 install --upgrade --no-cache-dir --verbose numpy && \
    pip3 show numpy && python3 -c 'import numpy; print(numpy.__version__)'

# opencv-cuda
ENV OPENCV_URL=https://nvidia.box.com/shared/static/ngp26xb9hb7dqbu6pbs7cs9flztmqwg0.gz \
    OPENCV_VERSION=4.8.1 \
    OPENCV_DEB=OpenCV-4.8.1-aarch64.tar.gz

RUN /scripts/install-opencv-cuda.sh

# cmake_apt
RUN /scripts/install-cmake.sh

# onnx
RUN pip3 install --no-cache-dir --verbose onnx || \
    pip3 install --no-cache-dir --verbose git+https://github.com/onnx/onnx@main && \
    pip3 show onnx && \
    python3 -c 'import onnx; print(onnx.__version__)'

# onnxruntime 1.16.3
# probably need more flags, rn dont have the backup for building.sh

# onnxruntime_BUILD_UNIT_TESTS=OFF \
#         --cuda_home /usr/local/cuda --cudnn_home /usr/lib/$(uname -m)-linux-gnu \
#         --use_tensorrt --tensorrt_home /usr/lib/$(uname -m)-linux-gnu
ENV ONNXRUNTIME_VERSION=1.16.3 \
    ONNXRUNTIME_BRANCH=v1.16.3 \
    ONNXRUNTIME_FLAGS=--allow_running_as_root

RUN /scripts/install-onnxruntime.sh

# protobuff_cpp
ENV PROTOBUF_VERSION=3.20.3
ENV PROTOBUF_URL=https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3
ENV PROTOBUF_DIR=protobuf-python-3.20.3
ENV PROTOC_DIR=protoc-3.20.3-linux-aarch_64
ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp

RUN /scripts/install-protobuf-cpp.sh

# zed
ENV L4T_MAJOR_VERSION=35
ENV L4T_MINOR_VERSION=3
ENV L4T_PATCH_VERSION=1
ENV ZED_SDK_MAJOR=4
ENV ZED_SDK_MINOR=0
ENV LOGNAME=root
ENV DEBIAN_FRONTEND=noninteractive


# ros2
ENV ROS_DISTRO=foxy
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PACKAGE=ros_base
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

RUN /scripts/install-ros2.sh

# will likely need to add to bashrc before using, steps for python to do that?, or just try running hello world example first

# docker build -t my_jetson_test .